<?php

/**
 * @file
 * ui_patterns_variants.module
 */

use Drupal\Core\Layout\LayoutDefinition;
use Drupal\ui_patterns\UiPatterns;
use \Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_layout_alter().
 */
function ui_patterns_variants_layout_alter(&$definitions) {
  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
  // Right now, this overrides the services provided in ui_patterns_library.
  foreach (UiPatterns::getPatternDefinitions() as $pattern_definition) {
    $definition = [
      'label' => $pattern_definition->getLabel(),
      'theme' => $pattern_definition->getThemeHook(),
      'provider' => $pattern_definition->getProvider(),
      'category' => 'Patterns',
      'class' => '\Drupal\ui_patterns_variants\Plugin\Layout\PatternVariants',
      'pattern' => $pattern_definition->id(),
      'template' => 'pattern-' . $pattern_definition->id(),
    ];
    foreach ($pattern_definition->getFields() as $field) {
      $definition['regions'][$field->getName()]['label'] = $field->getLabel();
    }
    $definitions['pattern_' . $pattern_definition->id()] = new LayoutDefinition($definition);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ui_patterns_variants_preprocess_ds_entity_view(&$variables) {
  $pattern_settings = $variables['content']['#ds_configuration']['layout']['settings']['pattern'];
  if (isset($pattern_settings['variants'])) {
    $variant_settings = [];
    $entity = $variables['content']['#entity'];
    $entity_fields = $entity->getFieldDefinitions();

    foreach ($pattern_settings['variants'] as $key => $variant) {
      $variant_settings[$key] = NULL;

      // If using a field value, make sure the field exists and has a value.
      if ($variant['variant_field'] &&
        isset($entity_fields[$variant['variant_field']]) &&
        $entity->get($variant['variant_field'])
      ) {
        $field_values = $entity->get($variant['variant_field'])->getValue();

        // Simply implode all values into a string for easier use.
        foreach ($field_values as &$value) {
          $value = implode(' ', $value);
        }
        $variant_settings[$key] = implode(' ', $field_values);
      }
      elseif (isset($variant['default'])) {
        $variant_settings[$key] = $variant['default'];
      }
    }

    // Set some variables to be used in the preprocess for the pattern.
    $variables['content']['#context']['variants'] = $variant_settings;
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function ui_patterns_variants_preprocess_views_view_field(&$variables) {
  /** @var ViewExecutable $view */
  $view = $variables['view'];
  if (!isset($view->rowPlugin->options['variants'])) {
    return;
  }
  $pattern = $view->rowPlugin->options['pattern'];
  $variants = $view->rowPlugin->options['variants'];
  $field_id = $variables['field']->options['id'];
  $output = trim(strip_tags(render($variables['output'])));

  foreach ($variants[$pattern] as $key => $variant) {
    if (!isset($variables['row']->variants[$key])) {
      $variables['row']->variants[$key] = $variant['default'];
    }

    if (!$variant['default'] && $field_id == $variant['field_mapping'] && $output) {
      $variables['row']->variants[$key] = $output;
    }

  }
}

/**
 * Implements hook_preprocess_pattern_views_row().
 */
function ui_patterns_variants_preprocess_pattern_views_row(&$variables) {
  if (isset($variables['row']->variants)) {
    $variables['pattern']['#context']['variants'] = $variables['row']->variants;
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function ui_patterns_variants_field_group_build_pre_render_alter(&$element) {
  $entity = NULL;
  foreach ($element as $item) {
    if (is_object($item) && method_exists($item, 'getEntityTypeId') && $item->getEntityTypeId() == $element['#entity_type']) {
      $entity = $item;
      break;
    }
  }

  foreach ($element['#fieldgroups'] as $group_name => $group) {
    if (isset($group->format_settings['variants'])) {
      foreach ($group->format_settings['variants'] as $key => $variant) {
        $element[$group_name]['#context']['variants'][$key] = $variant['default'];
        if ($variant['variant_field'] && $entity) {
          $field_values = $entity->get($variant['variant_field'])->getValue();
          foreach ($field_values as &$value) {
            $value = implode(' ', $value);
          }
          $element[$group_name]['#context']['variants'][$key] = implode(' ', $field_values);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function ui_patterns_variants_preprocess(&$variables, $hook) {
  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
  foreach (UiPatterns::getPatternDefinitions() as $pattern_definition) {
    if ($hook != 'pattern_' . $pattern_definition->id()) {
      continue;
    }

    $additional = $pattern_definition->getAdditional();
    if (!isset($additional['variants'])) {
      break;
    }

    /** @var \Drupal\ui_patterns\Element\PatternContext $context */
    $context = $variables['context'];
    $variants = $context->getProperty('variants');

    $variables['variants'] = [];
    if ($variants) {
      $variables['variants'] = $variants;
    }

    _ui_patterns_variants_validate_variants($pattern_definition->id(), $variables['variants']);
    break;
  }
}

/**
 * If a variant has options, validate the current setting is one of the options.
 *
 * @param string $pattern
 *   The pattern id being used.
 * @param array $variants
 *   The current variant settings.
 */
function _ui_patterns_variants_validate_variants($pattern, array &$variants) {

  foreach (_ui_patterns_variants_get_variants($pattern) as $key => $variant) {
    // Make sure all variants exist even if they are null.
    if (!isset($variants[$key])) {
      $variants[$key] = NULL;
    }

    if (isset($variant['options'])) {

      // Rip out anything that is not one of the options.
      $limited_options = [];
      foreach (array_keys($variant['options']) as $option) {
        if (strpos($variants[$key], $option) !== FALSE) {
          $limited_options[] = $option;
        }
      }
      $variants[$key] = implode(' ', $limited_options);

      // If the variant is not set at all, use the first option.
      $default = key($variant['options']);
      if (!$variants[$key]) {
        $variants[$key] = $default;
        continue;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_patterns_variants_form_views_ui_edit_display_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $storage = $form_state->getStorage();
  $executable = $storage['view']->get('storage')->getExecutable();

  if (!$executable->rowPlugin ||
    $executable->rowPlugin->getPluginId() != 'ui_patterns' ||
    empty($form['options']['row_options']['pattern_mapping'])
  ) {
    return;
  }

  $options = $executable->rowPlugin->options['variants'];

  // Get all fields in the view.
  $fields = $executable->display_handler->handlers['field'];
  $field_options = [];
  foreach (array_keys($fields) as $field_name) {
    $field_options[$field_name] = $field_name;
  }

  $patterns = &$form['options']['row_options']['pattern_mapping'];
  foreach ($patterns as $pattern_id => &$settings) {

    if (!($variants = _ui_patterns_variants_get_variants($pattern_id))) {
      continue;
    }

    $settings['variants'] = [
      '#type' => 'container',
      '#title' => t('Variants'),
    ];
    foreach ($variants as $key => $variant) {
      $settings['variants'][$key] = [
        '#type' => 'fieldset',
        '#title' => $variant['label'],
      ];
      $settings['variants'][$key]['default'] = [
        '#type' => 'select',
        '#title' => t('Variant setting'),
        '#options' => $variant['options'] + [0 => t('Field Value')],
        '#default_value' => $options[$pattern_id][$key]['default'],
      ];
      $settings['variants'][$key]['field_mapping'] = [
        '#type' => 'select',
        '#title' => 'Field Mapping',
        '#options' => $field_options,
        '#default_value' => $options[$pattern_id][$key]['field_mapping'],
        '#states' => [
          'visible' => [
            ':input[name="row_options[pattern_mapping][' . $pattern_id . '][variants][' . $key . '][default]"]' => ['value' => 0],
          ],
        ],
      ];
    }

  }

  array_unshift($form['actions']['submit']['#submit'], 'ui_patterns_variants_views_save');
}

/**
 * Custom save function in the views settings to move the variants.
 *
 * @param array $form
 *   The full form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The submitted form state.
 */
function ui_patterns_variants_views_save(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  foreach ($values['row_options']['pattern_mapping'] as $pattern_id => $pattern_settings) {
    if (isset($pattern_settings['variants'])) {
      $values['row_options']['variants'][$pattern_id] = $pattern_settings['variants'];
    }
  }
  $form_state->setValues($values);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_patterns_variants_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $storage = $form_state->getStorage();

  $entity_fields = $form_state->getFormObject()
    ->getEntity()
    ->get('fieldDefinitions');

  $field_options = [];
  /** @var \Drupal\field\Entity\FieldConfig $definition */
  foreach ($entity_fields as $field_name => $definition) {
    $field_options[$field_name] = $definition->getLabel();
  }

  foreach ($form['#fieldgroups'] as $group) {
    if (!isset($form['fields'][$group]['format']['format_settings'])) {
      continue;
    }


    $format_settings = &$form['fields'][$group]['format']['format_settings'];
    if (isset($format_settings['settings']['pattern_mapping'])) {

      $config = $storage['field_group'][$group]->format_settings['variants'];
      foreach ($format_settings['settings']['pattern_mapping'] as $pattern => &$pattern_settings) {
        if (empty($variants = _ui_patterns_variants_get_variants($pattern))) {
          continue;
        }

        $pattern_settings['variants'] = [
          '#type' => 'container',
          '#title' => t('Variants'),
        ];

        foreach ($variants as $key => $variant) {

          $pattern_settings['variants'][$key] = [
            '#type' => 'fieldset',
            '#title' => $variant['label'],
            '#description' => $variant['description'],
          ];

          // If no variant options are defined, we must rely on field mapping.
          if (isset($variant['options'])) {
            $pattern_settings['variants'][$key]['default'] = [
              '#type' => 'select',
              '#title' => t('Default value'),
              '#options' => $variant['options'],
              '#default_value' => $config[$key]['default'],
            ];

            $pattern_settings['variants'][$key]['options'] = [
              '#type' => 'hidden',
              '#value' => $variant['options'],
            ];
          }

          $pattern_settings['variants'][$key]['variant_field'] = [
            '#type' => 'select',
            '#title' => t('Variant Field'),
            '#description' => t('Field to define variant to use.'),
            '#options' => $field_options,
            '#empty_option' => t('- None -'),
            '#default_value' => $config[$key]['variant_field'],
          ];
        }
      }

      array_unshift($format_settings['actions']['save_settings']['#submit'], 'ui_patterns_variants_field_group_save');
    }
  }
}

/**
 * Field group update submission.
 */
function ui_patterns_variants_field_group_save($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  foreach ($form['#fieldgroups'] as $fieldgroup) {
    if (!isset($values['fields'][$fieldgroup]['settings_edit_form'])) {
      continue;
    }
    foreach ($values['fields'][$fieldgroup]['settings_edit_form']['settings']['pattern_mapping'] as $pattern => &$settings) {
      if ($pattern == $values['fields'][$fieldgroup]['settings_edit_form']['settings']['pattern']) {
        if (isset($settings['variants'])) {
          $values['fields']['group_postcard']['settings_edit_form']['settings']['variants'] = $settings['variants'];
        }
      }

      unset($settings['variants']);
    }
  }
  $form_state->setValues($values);
}

/**
 * Get the variants if any are defined for a particular pattern.
 *
 * @param string $pattern_id
 *   The pattern id.
 *
 * @return array
 *   The defined variants for the given pattern.
 */
function _ui_patterns_variants_get_variants($pattern_id) {
  $definition = UiPatterns::getPatternDefinition($pattern_id);
  $additional = $definition->getAdditional();
  if (isset($additional['variants'])) {
    return $additional['variants'];
  }
  return [];
}
