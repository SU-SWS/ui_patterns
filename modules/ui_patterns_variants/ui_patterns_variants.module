<?php

/**
 * @file
 * ui_patterns_variants.module
 */

use Drupal\Core\Layout\LayoutDefinition;
use Drupal\ui_patterns\UiPatterns;
use \Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_layout_alter().
 */
function ui_patterns_variants_layout_alter(&$definitions) {
  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
  // Right now, this overrides the services provided in ui_patterns_library.
  foreach (UiPatterns::getPatternDefinitions() as $pattern_definition) {
    $definition = [
      'label' => $pattern_definition->getLabel(),
      'theme' => $pattern_definition->getThemeHook(),
      'provider' => $pattern_definition->getProvider(),
      'category' => 'Patterns',
      'class' => '\Drupal\ui_patterns_variants\Plugin\Layout\PatternVariants',
      'pattern' => $pattern_definition->id(),
      'template' => 'pattern-' . $pattern_definition->id(),
    ];
    foreach ($pattern_definition->getFields() as $field) {
      $definition['regions'][$field->getName()]['label'] = $field->getLabel();
    }
    $definitions['pattern_' . $pattern_definition->id()] = new LayoutDefinition($definition);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ui_patterns_variants_preprocess_ds_entity_view(&$variables) {
  $pattern_settings = $variables['content']['#ds_configuration']['layout']['settings']['pattern'];
  if (isset($pattern_settings['variants'])) {
    $variant_settings = [];
    $entity = $variables['content']['#entity'];
    $entity_fields = $entity->getFieldDefinitions();

    foreach ($pattern_settings['variants'] as $key => $variant) {
      $variant_settings[$key] = NULL;

      // If using a field value, make sure the field exists and has a value.
      if ($variant['variant_field'] &&
        isset($entity_fields[$variant['variant_field']]) &&
        $entity->get($variant['variant_field'])
      ) {
        $field_values = $entity->get($variant['variant_field'])->getValue();

        // Simply implode all values into a string for easier use.
        foreach ($field_values as &$value) {
          $value = implode(' ', $value);
        }
        $variant_settings[$key] = implode(' ', $field_values);
      }
      elseif (isset($variant['default'])) {
        $variant_settings[$key] = $variant['default'];
      }
    }

    // Set some variables to be used in the preprocess for the pattern.
    $variables['content']['#context']['variants'] = $variant_settings;
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function ui_patterns_variants_preprocess_views_view_field(&$variables) {
  /** @var ViewExecutable $view */
  $view = $variables['view'];
  if (!isset($view->rowPlugin->options['variants'])) {
    return;
  }
  $pattern = $view->rowPlugin->options['pattern'];
  $variants = $view->rowPlugin->options['variants'];
  $field_id = $variables['field']->options['id'];
  $output = trim(strip_tags(render($variables['output'])));

  foreach ($variants[$pattern] as $key => $variant) {
    if (!isset($variables['row']->variants[$key])) {
      $variables['row']->variants[$key] = $variant['default'];
    }

    if (!$variant['default'] && $field_id == $variant['field_mapping'] && $output) {
      $variables['row']->variants[$key] = $output;
    }

  }
}

/**
 * Implements hook_preprocess_pattern_views_row().
 */
function ui_patterns_variants_preprocess_pattern_views_row(&$variables) {
  if (isset($variables['row']->variants)) {
    $variables['pattern']['#context']['variants'] = $variables['row']->variants;
  }
}

/**
 * Implements hook_preprocess().
 */
function ui_patterns_variants_preprocess(&$variables, $hook) {
  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
  foreach (UiPatterns::getPatternDefinitions() as $pattern_definition) {
    if ($hook != 'pattern_' . $pattern_definition->id()) {
      continue;
    }

    $additional = $pattern_definition->getAdditional();
    if (!isset($additional['variants'])) {
      break;
    }

    /** @var \Drupal\ui_patterns\Element\PatternContext $context */
    $context = $variables['context'];
    $variants = $context->getProperty('variants');

    $variables['variants'] = [];
    if ($variants) {
      $variables['variants'] = $variants;
    }

    _ui_patterns_variants_validate_variants($pattern_definition->id(), $variables['variants']);
    break;
  }
}

/**
 * If a variant has options, validate the current setting is one of the options.
 *
 * @param string $pattern
 *   The pattern id being used.
 * @param array $variants
 *   The current variant settings.
 */
function _ui_patterns_variants_validate_variants($pattern, array &$variants) {
  $pattern_definition = UiPatterns::getPatternDefinition($pattern);
  $additional = $pattern_definition->getAdditional();

  foreach ($additional['variants'] as $key => $variant) {
    // Make sure all variants exist even if they are null.
    if (!isset($variants[$key])) {
      $variants[$key] = NULL;
    }

    if (isset($variant['options'])) {

      // Rip out anything that is not one of the options.
      $limited_options = [];
      foreach (array_keys($variant['options']) as $option) {
        if (strpos($variants[$key], $option) !== FALSE) {
          $limited_options[] = $option;
        }
      }
      $variants[$key] = implode(' ', $limited_options);

      // If the variant is not set at all, use the first option.
      $default = key($variant['options']);
      if (!$variants[$key]) {
        $variants[$key] = $default;
        continue;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_patterns_variants_form_views_ui_edit_display_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $storage = $form_state->getStorage();
  $executable = $storage['view']->get('storage')->getExecutable();

  if ($executable->rowPlugin->getPluginId() != 'ui_patterns' || empty($form['options']['row_options']['pattern_mapping'])) {
    return;
  }

  $options = $executable->rowPlugin->options['variants'];

  // Get all fields in the view.
  $fields = $executable->display_handler->handlers['field'];
  $field_options = [];
  foreach (array_keys($fields) as $field_name) {
    $field_options[$field_name] = $field_name;
  }

  $patterns = &$form['options']['row_options']['pattern_mapping'];
  foreach ($patterns as $pattern_id => &$settings) {
    // Get the pattern definition and additional where the variants live.
    $pattern_definition = UiPatterns::getPatternDefinition($pattern_id);
    $additional = $pattern_definition->getAdditional();

    if (isset($additional['variants'])) {
      $settings['variants'] = [
        '#type' => 'container',
        '#title' => t('Variants'),
      ];
      foreach ($additional['variants'] as $key => $variant) {
        $settings['variants'][$key] = [
          '#type' => 'fieldset',
          '#title' => $variant['label'],
        ];
        $settings['variants'][$key]['default'] = [
          '#type' => 'select',
          '#title' => t('Variant setting'),
          '#options' => $variant['options'] + [0 => t('Field Value')],
          '#default_value' => $options[$pattern_id][$key]['default'],
        ];
        $settings['variants'][$key]['field_mapping'] = [
          '#type' => 'select',
          '#title' => 'Field Mapping',
          '#options' => $field_options,
          '#default_value' => $options[$pattern_id][$key]['field_mapping'],
          '#states' => [
            'visible' => [
              ':input[name="row_options[pattern_mapping][' . $pattern_id . '][variants][' . $key . '][default]"]' => ['value' => 0],
            ],
          ],
        ];
      }
    }
  }

  array_unshift($form['actions']['submit']['#submit'], 'ui_patterns_variants_views_save');
}

/**
 * Custom save function in the views settings to move the variants.
 *
 * @param array $form
 *   The full form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The submitted form state.
 */
function ui_patterns_variants_views_save(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  foreach ($values['row_options']['pattern_mapping'] as $pattern_id => $pattern_settings) {
    if (isset($pattern_settings['variants'])) {
      $values['row_options']['variants'][$pattern_id] = $pattern_settings['variants'];
    }
  }
  $form_state->setValues($values);
}
