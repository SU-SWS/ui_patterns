<?php

/**
 * @file
 * ui_patterns_variants.module
 */

use Drupal\Core\Layout\LayoutDefinition;
use Drupal\ui_patterns\UiPatterns;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\ui_patterns\Element\PatternContext;

/**
 * Implements hook_layout_alter().
 */
function ui_patterns_variants_layout_alter(&$definitions) {
  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
  // Right now, this overrides the services provided in ui_patterns_library.
  foreach (UiPatterns::getPatternDefinitions() as $pattern_definition) {
    $additional = $pattern_definition->getAdditional();
    if (!isset($additional['variants'])) {
      continue;
    }
    $definition = [
      'label' => $pattern_definition->getLabel(),
      'theme' => $pattern_definition->getThemeHook(),
      'provider' => $pattern_definition->getProvider(),
      'category' => 'Patterns',
      'class' => '\Drupal\ui_patterns_variants\Plugin\Layout\PatternVariants',
      'pattern' => $pattern_definition->id(),
      'template' => 'pattern-' . $pattern_definition->id(),
    ];
    foreach ($pattern_definition->getFields() as $field) {
      $definition['regions'][$field->getName()]['label'] = $field->getLabel();
    }
    $definitions['pattern_' . $pattern_definition->id()] = new LayoutDefinition($definition);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ui_patterns_variants_preprocess_ds_entity_view(&$variables) {
  if (empty($variables['content']['#ds_configuration']['layout']['settings']['pattern'])) {
    return;
  }

  $pattern_settings = $variables['content']['#ds_configuration']['layout']['settings']['pattern'];
  if (isset($pattern_settings['variants'])) {
    $variant_settings = [];

    foreach ($pattern_settings['variants'] as $key => $variant) {
      $variant_settings[$key] = isset($variant['default']) ? $variant['default'] : NULL;

      // If configured to use a field on the entity, override the default value.
      if ($variant['variant_field']) {
        $field_value = _ui_patterns_variants_entity_variant_value($variables['content']['#entity'], $variant['variant_field']);

        // Only override default if the field has a value.
        if ($field_value) {
          $variant_settings[$key] = $field_value;
        }
      }
    }

    // Set some variables to be used in the preprocess for the pattern.
    $variables['content']['#context']['variants'] = $variant_settings;
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 *
 * Get the value of the field to be used in the variants.
 */
function ui_patterns_variants_preprocess_views_view_field(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  if (!isset($view->rowPlugin->options['variants'])) {
    return;
  }
  $variants = $view->rowPlugin->options['variants'];
  $field_id = $variables['field']->options['id'];

  foreach ($variants as $key => $variant) {
    // Don't overwrite the variant value since it could've been set by a field's
    // value.
    if (!isset($variables['row']->variants[$key])) {
      $variables['row']->variants[$key] = isset($variant['default']) ? $variant['default'] : '';
    }

    // Override any default value if configured to use this field value.
    if (!$variant['default'] && $field_id == $variant['field_mapping'] && $variables['output']) {
      $output = trim(strip_tags(render($variables['output'])));
      $variables['row']->variants[$key] = $output;
    }
  }
}

/**
 * Implements hook_preprocess_pattern_views_row().
 */
function ui_patterns_variants_preprocess_pattern_views_row(&$variables) {
  if (isset($variables['row']->variants)) {
    // Pass row variants into the context for pattern preprocess.
    $variables['pattern']['#context']['variants'] = $variables['row']->variants;
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function ui_patterns_variants_field_group_build_pre_render_alter(&$element) {
  // Find the entity.
  $entity = NULL;
  foreach ($element as $item) {
    if (is_object($item) && method_exists($item, 'getEntityTypeId') && $item->getEntityTypeId() == $element['#entity_type']) {
      $entity = $item;
      break;
    }
  }

  foreach ($element['#fieldgroups'] as $group_name => $group) {
    if (isset($group->format_settings['variants'])) {
      $variant_values = [];

      foreach ($group->format_settings['variants'] as $key => $variant) {
        // Set the initial value to the default setting, override for field
        // values next.
        $variant_values[$key] = $variant['default'];
        if ($variant['variant_field'] && $entity) {
          $field_value = _ui_patterns_variants_entity_variant_value($entity, $variant['variant_field']);

          // Only overwrite the default setting if the field has a value.
          if ($field_value) {
            $variant_values[$key] = $field_value;
          }
        }
      }

      $element[$group_name]['#context']['variants'] = $variant_values;
    }
  }
}

/**
 * Implements hook_preprocess_panelizer_view_mode().
 */
function ui_patterns_variants_preprocess_panelizer_view_mode(&$variables) {
  $config = $variables['element']['#panels_display']->getConfiguration();

  if (!empty($config['layout_settings']['pattern']['variants'])) {
    $variant_settings = [];

    foreach ($config['layout_settings']['pattern']['variants'] as $key => $variant) {
      $variant_settings[$key] = isset($variant['default']) ? $variant['default'] : '';
      if (isset($variant['variant_field']) && $variant['variant_field']) {
        $variant_settings[$key] = _ui_patterns_variants_entity_variant_value($variables['entity'], $variant['variant_field']);
      }
    }

    // Add context to the fields that can be accessed in the pattern preprocess.
    $variables['content']['#fields']['context'] = new PatternContext('variants', ['variants' => $variant_settings]);
  }
}

/**
 * Implements hook_preprocess().
 */
function ui_patterns_variants_preprocess(&$variables, $hook) {
  $definitions = [];
  ui_patterns_variants_layout_alter($definitions);

  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
  foreach (array_keys($definitions) as $pattern_id) {
    if ($hook != $pattern_id) {
      continue;
    }

    /** @var \Drupal\ui_patterns\Element\PatternContext $context */
    $context = $variables['context'];
    $variants = $context->getProperty('variants');
    $variables['variants'] = $variants ? $variants : [];

    _ui_patterns_variants_validate_variants(substr($pattern_id, 8), $variables['variants']);
    break;
  }
}

/**
 * If a variant has options, validate the current setting is one of the options.
 *
 * @param string $pattern
 *   The pattern id being used.
 * @param array $variants
 *   The current variant settings.
 */
function _ui_patterns_variants_validate_variants($pattern, array &$variant_settings) {

  foreach (_ui_patterns_variants_get_variants($pattern) as $key => $variant) {
    // Make sure all variants exist even if they are null.
    if (!isset($variant_settings[$key])) {
      $variant_settings[$key] = NULL;
    }

    if (isset($variant['options'])) {

      // Rip out anything that is not one of the options.
      $limited_options = [];
      foreach (array_keys($variant['options']) as $option) {
        if (strpos($variant_settings[$key], $option) !== FALSE) {
          $limited_options[] = $option;
        }
      }
      $variant_settings[$key] = implode(' ', $limited_options);

      // If the variant is not set at all, use the first option.
      if (!$variant_settings[$key]) {
        $variant_settings[$key] = key($variant['options']);
        continue;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_patterns_variants_form_views_ui_edit_display_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $storage = $form_state->getStorage();
  $executable = $storage['view']->get('storage')->getExecutable();

  // Not a Patterns row setting or not in the correct form.
  if (!$executable->rowPlugin ||
    $executable->rowPlugin->getPluginId() != 'ui_patterns' ||
    empty($form['options']['row_options']['pattern_mapping'])
  ) {
    return;
  }

  $defaults = [];
  if (isset($executable->rowPlugin->options['variants'])) {
    $defaults = $executable->rowPlugin->options['variants'];
  }

  // Get all fields in the view.
  $fields = $executable->display_handler->handlers['field'];
  $field_options = [];
  foreach (array_keys($fields) as $field_name) {
    $field_options[$field_name] = $field_name;
  }

  $patterns = &$form['options']['row_options']['pattern_mapping'];
  foreach ($patterns as $pattern_id => &$settings) {

    if (!($variants = _ui_patterns_variants_get_variants($pattern_id))) {
      continue;
    }

    $settings += _ui_patterns_variants_get_form_elements($variants, $defaults, $field_options);
  }

  array_unshift($form['actions']['submit']['#submit'], 'ui_patterns_variants_views_save');
}

/**
 * Custom save function in the views settings to move the variants.
 *
 * @param array $form
 *   The full form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The submitted form state.
 */
function ui_patterns_variants_views_save(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $pattern = $values['row_options']['pattern'];
  if (isset($values['row_options']['pattern_mapping'][$pattern]['variants'])) {
    $values['row_options']['variants'] = $values['row_options']['pattern_mapping'][$pattern]['variants'];
    $form_state->setValues($values);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_patterns_variants_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $storage = $form_state->getStorage();

  $entity_fields = $form_state->getFormObject()
    ->getEntity()
    ->get('fieldDefinitions');

  $field_options = [];
  /** @var \Drupal\field\Entity\FieldConfig $definition */
  foreach ($entity_fields as $field_name => $definition) {
    $field_options[$field_name] = $definition->getLabel();
  }

  foreach ($form['#fieldgroups'] as $group) {
    if (!isset($form['fields'][$group]['format']['format_settings'])) {
      continue;
    }


    $format_settings = &$form['fields'][$group]['format']['format_settings'];
    if (isset($format_settings['settings']['pattern_mapping'])) {

      $defaults = $storage['field_group'][$group]->format_settings['variants'];
      foreach ($format_settings['settings']['pattern_mapping'] as $pattern => &$pattern_settings) {
        if (empty($variants = _ui_patterns_variants_get_variants($pattern))) {
          continue;
        }
        $pattern_settings += _ui_patterns_variants_get_form_elements($variants, $defaults, $field_options);
      }

      array_unshift($format_settings['actions']['save_settings']['#submit'], 'ui_patterns_variants_field_group_save');
    }
  }
}

/**
 * Field group update submission.
 */
function ui_patterns_variants_field_group_save($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  foreach ($form['#fieldgroups'] as $fieldgroup) {
    if (!isset($values['fields'][$fieldgroup]['settings_edit_form'])) {
      continue;
    }
    foreach ($values['fields'][$fieldgroup]['settings_edit_form']['settings']['pattern_mapping'] as $pattern => &$settings) {
      if ($pattern == $values['fields'][$fieldgroup]['settings_edit_form']['settings']['pattern']) {
        if (isset($settings['variants'])) {
          $values['fields']['group_postcard']['settings_edit_form']['settings']['variants'] = $settings['variants'];
        }
      }

      unset($settings['variants']);
    }
  }
  $form_state->setValues($values);
}

/**
 * Get the variants if any are defined for a particular pattern.
 *
 * @param string $pattern_id
 *   The pattern id.
 *
 * @return array
 *   The defined variants for the given pattern.
 */
function _ui_patterns_variants_get_variants($pattern_id) {
  $definition = UiPatterns::getPatternDefinition($pattern_id);
  $additional = $definition->getAdditional();
  if (isset($additional['variants'])) {
    return $additional['variants'];
  }
  return [];
}

/**
 * Get the variant field values and implode them into a string.
 *
 * @param object $entity
 *   The fieldable entity.
 * @param string $variant_field
 *   The field name to get values.
 *
 * @return string
 *   Imploded field values.
 */
function _ui_patterns_variants_entity_variant_value($entity, $variant_field) {
  $entity_fields = $entity->getFieldDefinitions();

  if (!$entity_fields || !isset($entity_fields[$variant_field])) {
    return '';
  }

  $field_values = $entity->get($variant_field)->getValue();
  foreach ($field_values as &$value) {
    $value = implode(' ', $value);
  }
  return implode(' ', $field_values);
}

/**
 * Get the form fields for the variant settings.
 *
 * @param array $variants
 *   Keyed array of variants with their definitions.
 * @param array $defaults
 *   Default values for the form.
 * @param array $field_options
 *   Available fields to use as the variant values.
 *
 * @return array
 *   The form elements array.
 */
function _ui_patterns_variants_get_form_elements(array $variants, array $defaults, array $field_options = []) {
  $pattern_settings = [];
  $pattern_settings['variants'] = [
    '#type' => 'container',
    '#title' => t('Variants'),
  ];

  foreach ($variants as $key => $variant) {
    if (!isset($variant['options']) && !$field_options) {
      continue;
    }

    $pattern_settings['variants'][$key] = [
      '#type' => 'fieldset',
      '#title' => $variant['label'],
      '#description' => isset($variant['description']) ? $variant['description'] : '',
    ];

    $available_options = [];
    // If no variant options are defined, we must rely on field mapping.
    if (isset($variant['options'])) {
      $pattern_settings['variants'][$key]['default'] = [
        '#type' => 'select',
        '#title' => t('Default value'),
        '#options' => $variant['options'],
        '#default_value' => !empty($defaults[$key]['default']) ? $defaults[$key]['default'] : NULL,
      ];

      $pattern_settings['variants'][$key]['options'] = [
        '#type' => 'hidden',
        '#value' => $variant['options'],
      ];
      $available_options = array_keys($variant['options']);
    }

    if ($field_options) {
      $pattern_settings['variants'][$key]['variant_field'] = [
        '#type' => 'select',
        '#title' => t('Variant Field'),
        '#description' => t('Field to define variant to use. Valid values are: %values', ['%values' => implode(', ', $available_options)]),
        '#options' => $field_options,
        '#empty_option' => t('- None -'),
        '#default_value' => !empty($defaults[$key]['variant_field']) ? $defaults[$key]['variant_field'] : NULL,
      ];
    }
  }
  return $pattern_settings;
}
